1. Recursion is  a procedure that calls upon itself until a condition (base case) is reached. The nature of recursion is to break a problem down into smaller problems until the problems can be solved trivially.
Iteration is  a procedure that uses loop to repeat a process and may be harder to implement.

2. Name five algorithms that are commonly implemented by recursion.
1. Binary search
2. Merge sort
3. Fibonacci
4. Factorial
5. Quick sort

3. You should use recursion when you have an algorithm that deals with results starting with known cases. When you have an algorithm that passes over a collection of data, it's best to use an iterative solution.

4. Both recursive and iterative procedures lead to the correct solution.  However, the iterative solutions tend to look cleaner and simpler when used to run through data, while recursion looks simpler when calculating factorials.

5.
var calcArray = (array) => {
      let counter =0;
   for (var i=0; i < array.length; i++) {
     if (typeof array[i] === "object") {
         counter += calcArray(array[i]);
     } else {
       counter++;
     }
   }
    return counter;
}

calcArray([1,3,5,[1,3,5]]);

6.
const isPalindrome = (str) => {
   if (str.length === 0) {
     return true;
  }
   if (str[0] !== str[str.length-1]) {
     return false;
   }
  return isPalindrome(str.slice(1,str.length-1))
}

isPalindrome(‘racecar’);


7. This behaviour exhibits properties of recursion because recursion is when a function calls upon itself. When ‘recursion’ is typed into google, it is a reference to itself.
