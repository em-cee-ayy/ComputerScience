1. What is a hash table?
A hash table is a data structure used to carry out an associative array, a structure that can map keys to values.

2. What is hashing?
Hashing is transforming a string of characters into a (usually) shorter value or key that represents the original string.

3. How does a hash table store data?
A hash table stores data by converting the key into a hash code and storing it into an array index.

4. How are hash tables and objects different?
Hash tables are used to collect similar data, while objects can hold different types of data put together.

5. Determine whether you would use a hash table or an object to store each of the following pieces of data:
A list of pets and their unique names.
Hash table
The name, age, and the birthday of your best friend.
Object
The name and location of every company in a given city.
Hash table
All of the books checked out from a library by a particular individual.
Hash table
The primary and secondary phone numbers for a contact.
Object

6.
var hash = (string, max) => {
  var hash = 0;
  for (var i = 0; i < string.length; i++) {
    hash += string.charCodeAt(i);
  }
  return hash % max;
};

let HashTable = function() {

  let storage = [];
  const storageLimit = 100;

  this.add = function(key,value) {
    var index = hash(key, storageLimit);
    if (storage[index] === undefined) {
      storage[index] = [
        [key,value]
      ];
    } else {
      var inserted = false;
      for (var i = 0; i < storage[index].length; i++) {
        if (storage[index][i][0] === key) {
          storage[index][i][1] = value;
          inserted = true;
        }
      }
      if (inserted === false) {
        storage[index].push([key,value]);
      }
    }
  };

  this.lookup = function(key) {
    var index = hash(key, storageLimit);
    if (storage[index] === undefined) {
      return undefined;
    } else {
      for (var i = 0; i < storage[index].length; i++) {
        if (storage[index][i][0] === key) {
          return storage[index][i][1];
        }
      }
    }
  };

};

var hasht = new HashTable();
hasht.add(7856,{name:'Emily', address:' 54 Saints Ln. '})
hasht.add(1000,{name:'Joey', address:' 250 Lilly Ave. '});
hasht.add(7500,{name:'Isla', address:' 12 Mulberry St. '});

console.log(ht.lookup(7856));
console.log(ht.lookup(7500));
console.log(ht.lookup(1000));

7.
var hash = (string,max) =>{
  var hash= 0
  for(var i=0; i<string.length;i++){
    hash += string.charCodeAt(i)
  }
  return hash % max;
};

let HashTable = function(){
 let storage = [];
 const storageLimit= 5;


 this.add = function(key, value) {
    var index = hash(key, storageLimit);
    if (storage[index] === undefined) {
      storage[index] = [
        [key, value]
      ];
    } else {
      var inserted = false;
      for (var i = 0; i < storage[index].length; i++) {
        if (storage[index][i][0] === key) {
          storage[index][i][1] = value;
          inserted = true;
        }
      }
      if (inserted === false) {
        storage[index].push([key, value]);
      }
    }
  };

  this.search = function(key) {
    var index = hash(key, storageLimit);
    if (storage[index] === undefined) {
      return undefined;
    } else {
      for (var i = 0; i < storage[index].length; i++) {
        if (storage[index][i][0] === key) {
          return storage[index][i][1];
        }
      }
    }
  };

};

var hT = new HashTable();
hT.add('Romantic Comedies', 230);
hT.add('Chick Flicks', 3000);
hT.add('Horror Movies', 125);
hT.add('Drama', 460);

8.
let hash = (string, max)=> {
  var hash = 0;
  for(var i=0; i< string.length;i++){
    hash+= string.charCodeAt(i);
  }
  return hash % max;
}

class Newspaper {
  constructor() {
    this.storage = [];
    this.storageLimit = 60;
  }

  add(publisher, pubDate) {
    let key = publisher + pubDate;
    let index = hash(key, this.storageLimit);
    let data = [publisher, pubDate];
      if (this.storage[index] === undefined) {
        this.storage[index] = [ ];
    }
    this.storage[index].push(data);
    }

  search(publisher, pubDate) {
    let key = publisher + pubDate;
    let index = hash(key, this.storageLimit);
    let result = [];

    if (!this.storage[index]) { return 'No results were found for this search' }
      this.storage[index].forEach(entry => {
       if (entry[0] === publisher && entry[1] === pubDate) {
        result.push(entry);
      }
    })
    return result;
  }
}


let theNews = new Newspaper();
theNews.add('New York Times', '2019');
theNews.add('The Current', '2017');
theNews.add('Time','1995');
theNews.add('Publishing Company', '2003');
