1. What is a hash table?
A hash table is a data structure used to carry out an associative array, a structure that can map keys to values.

2. What is hashing?
Hashing is transforming a string of characters into a (usually) shorter value or key that represents the original string.

3. How does a hash table store data?
A hash table stores data by converting the key into a hash code and storing it into an array index.

4. How are hash tables and objects different?
Hash tables are used to collect similar data, while objects can hold different types of data put together.

5. Determine whether you would use a hash table or an object to store each of the following pieces of data:
A list of pets and their unique names.
Hash table
The name, age, and the birthday of your best friend.
Object
The name and location of every company in a given city.
Hash table
All of the books checked out from a library by a particular individual.
Hash table
The primary and secondary phone numbers for a contact.
Object

6.
function getHash (string, tableMax) {
  let result = 0;
  for (var i = 0; i < string.length; i++) {
    result += string.charCodeAt(i);
  }
  return result % tableMax;
}

class HashTable {

  constructor() {
    this.hashStore = [];
    this.hashLimit = 100;
  }

  addEntry(custInfo) {
    var index = getHash(custInfo.phone, this.hashLimit);

    if (!this.hashStore[index]) { this.hashStore[index] = []; }

    this.hashStore[index].push(custInfo);
  }

  searchEntry(phoneNumber) {
    var index = getHash(phoneNumber, this.hashLimit);

    return this.hashStore[index].filter(customer => customer.phone === phoneNumber);
  }

}

let hash = new HashTable();
hash.addEntry({name: 'Mariah', phone: '999-999-9999' })
hash.addEntry({name: 'Lina', phone: '998-999-9999' })
console.log(hash.searchEntry('999-999-9999'))

7.
const hash = (key, max) => {
            let hash = 0;
            for (let i = 0; i < key.length; i++) {
                hash += key.charCodeAt(i);
            }
            return hash % max;
        }

        class HashTable {
            constructor() {
                this.max = 25;
                this.buckets = Array(this.max);

                for (let i = 0; i < this.buckets.length; i++) {
                    this.buckets[i] = new Map();
                }
            }
            add(key, value) {
                let index = hash(key, this.max);
                this.buckets[index].set(key, value);

            }

            inventory(key) {
                let index = hash(key, this.max);
                return this.buckets[index].get(key);

            }


        }

        let ht = new HashTable();

        ht.add("Horror", 2000);
        ht.add("Rom-Com", 3000);
        ht.add("Drama", 1500);
        console.log(ht.inventory("Drama"));

8.
class HashTable {
            constructor() {
                this.storage = [];
                this.max = 25;
            }

            hash(string, max) {
                let hash = 0;

                for (let i = 0; i < string.length; i++) {
                    hash += string.charCodeAt(i);
                }
                return hash % max;
            }

            add(value) {
                var key = value.publisher + value.date;
                var index = this.hash(key, this.max);


                if (this.storage[index] === undefined) {
                    this.storage[index] = value;
                } else {
                    for (var i = 0; i < storage[index].length; i++) {
                        if (storage[index][i] === key) {
                            storage[index][i] = value;

                        }
                    }
                }
            }

            lookup({ publisher, date }) {
                let key = publisher + date;
                let index = this.hash(key, this.max);
                console.log(index);
                if (!this.storage[index]) {
                    return "not found";
                } else {
                    return this.storage[index].article;
                }
            }
        }

        var ht = new HashTable();

        ht.add({ publisher: "NY Times", date: "2005", article: "Veganism" });
        ht.add({ publisher: "LA Times", date: "2011", article: "Yoga on the Beach" });
        console.log(ht.lookup({ publisher: "NY Times", date: "2005" }))
